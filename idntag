#!/usr/bin/env python3

# Copyright (c) 2018 Kristofer Berggren
# All rights reserved.
#
# idntag is distributed under the MIT license, see LICENSE for details.

import acoustid
import argparse
import base64
import glob
import os
import re
import taglib
import time


def rate_limit(min_interval):
    try:
        sleep_duration = min_interval - (time.time() - rate_limit.last_timestamp)
    except AttributeError:
        sleep_duration = 0

    if sleep_duration > 0:
        time.sleep(sleep_duration)

    rate_limit.last_timestamp = time.time()


def clean_str(str, whitespace_char):
    return ''.join([c for c in str.replace(";", " &") if c not in "%:/,.\\[]<>*?"]).replace(" ", whitespace_char)


def dir_exists(dir):
    if not os.path.isdir(dir):
        raise argparse.ArgumentTypeError('The directory you specified does not seem to exist!')
    else:
        return dir


def process_failure(path, args, msg):
    if args.fail != None:
        file_dir, file_name = os.path.split(path)
        os.rename(path, os.path.abspath(args.fail) + "/" + file_name)
    print("FAIL : " + msg)

def identify_and_update_file(path, args):

    rate_limit(1.0/3.0)
    print(path + " : ", end='')

    new_path = path

    try:
        results = acoustid.match(base64.b64decode(b'Ym5jenB4cmtoOA=='), path)
    except acoustid.NoBackendError:
        process_failure(path, args, "backend library not found")
        return False
    except acoustid.FingerprintGenerationError:
        process_failure(path, args, "fingerprint generation error")
        return False
    except acoustid.WebServiceError as exc:
        process_failure(path, args, "web service error (" + exc.message + ")")
        return False

    try:
        for score, rid, title, artist in results:
            song = taglib.File(path)
            song.tags["ARTIST"] = [artist]
            song.tags["TITLE"] = [title]
            song.save()

            if not args.keep_name:
                file_dir, file_name = os.path.split(path)
                file_name, file_ext = os.path.splitext(path)
                if args.success != None:
                    file_dir = os.path.abspath(args.success)
                new_path = file_dir + "/" + clean_str(artist, args.whitespace_char) + args.whitespace_char + "-" + args.whitespace_char + clean_str(title, args.whitespace_char) + file_ext
                # XXX: todo check if file exists before overwriting?
                os.rename(path, new_path)
            elif args.success:
                file_dir, file_name = os.path.split(path)
                if args.success != None:
                    file_dir = os.path.abspath(args.success)
                new_path = file_dir + "/" + file_name
                os.rename(path, new_path)

            print("OK : " + new_path)
            return True
    except Exception as e:
        if hasattr(e, 'message'):
            message = e.message
        else:
            message = e
        process_failure(path, args, str(message))
        return False

    process_failure(path, args, "no matches found")
    return False


def main():
    parser = argparse.ArgumentParser(prog="idntag", description=
                                     "Identify artist and song name from specified "
                                     "audio files and update their ID3-tag meta-data "
                                     "with correct data, and rename the files on format "
                                     "Artist_Name-Track_Name.")
    parser.add_argument("-k", "--keep_name", action="store_true", help="Keep original filename")
    parser.add_argument("-v", "--version", action='version', version='%(prog)s v1.0.4')
    parser.add_argument("-w", "--whitespace_char", default=" ", help="Character to replace whitespace with in filename (does not work when --keep_name argument is used)")
    parser.add_argument('-s','--success', type=dir_exists, help='Move successfully processed files to this directory')
    parser.add_argument('-f','--fail', type=dir_exists, help='Move files that failed to process to this directory')
    parser.add_argument('path', nargs='+', help='Path of a file or directory to process')
    args = parser.parse_args()

    abs_paths = [os.path.join(os.getcwd(), path) for path in args.path]
    paths = set()
    for path in abs_paths:
        if os.path.isfile(path):
            paths.add(path)
        elif os.path.isdir(path):
            abs_paths += glob.glob(path + '/*')

    for path in paths:
        identify_and_update_file(path, args)

if __name__ == "__main__":
    main()
